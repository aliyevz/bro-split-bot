import os
import sqlite3
import logging
import datetime
from typing import List, Any

from flask import Flask
from threading import Thread
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    CallbackQueryHandler,
    ContextTypes,
    Updater,
    MessageHandler
)
import pandas as pd

import database, luhn

# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# –ß–∏—Ç–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å—Ä–µ–¥—ã
# TOKEN = "7500460303:AAEZ8XB59m5DwoOIxGK7XettnW5ekPi6tMs"
TOKEN = os.environ["BOT_TOKEN"]
# CHAT_ID = int(os.environ["CHAT_ID"])


# === –ö–æ–º–∞–Ω–¥—ã ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):

    user = update.effective_user
    chat_id = update.effective_chat.id
    chat_type = update.effective_chat.type

    database.init_db(chat_id)

    if chat_type in ['group', 'supergroup', 'channel']:
        await update.message.reply_html(
            rf"–ü—Ä–∏–≤–µ—Ç, {user.mention_html()}! –Ø –±–æ—Ç –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç —Å–ª–µ–¥–∏—Ç—å –∑–∞ —Ä–∞—Å—Ö–æ–¥–∞–º–∏" 
            rf"–≤ —ç—Ç–æ–º —á–∞—Ç–µ (**ID: `{chat_id}`**). "
        )
    else:  # –ü—Ä–∏–≤–∞—Ç–Ω—ã–π —á–∞—Ç
        await update.message.reply_html(
            rf"–ü—Ä–∏–≤–µ—Ç, {user.mention_html()}! –Ø –±–æ—Ç –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç —Å–ª–µ–¥–∏—Ç—å –∑–∞ —Ä–∞—Å—Ö–æ–¥–∞–º–∏"
        )

    keyboard = [
        [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥", callback_data='add')],
        [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å payback", callback_data='payback')],
        [InlineKeyboardButton("üìä –ë–∞–ª–∞–Ω—Å –±—Ä–∞—Ç–∏—à–µ–∫ –ø–∏—É", callback_data='balance')],
        [InlineKeyboardButton("üìä Excel", callback_data='excel')],
        [InlineKeyboardButton("üîÑ –û–±–Ω—É–ª–∏—Ç—å –≤—Å–µ —Ä–∞—Å—á–µ—Ç—ã", callback_data='reset')],
        [InlineKeyboardButton("‚Ñπ –ü–æ–º–æ—â—å –±—Ä–∞—Ç–∏—à–∫–∞–º", callback_data='help')],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        "–ü–æ–º–Ω–∏, –±—Ä–æ! –ö—Ç–æ –ø–ª–∞—Ç–∏–ª, —Ç–æ—Ç –∏ –≤–≤–æ–¥–∏—Ç! üí∏\n–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=reply_markup
    )

async def add(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        chat_id = update.effective_chat.id
        user_id = update.effective_user.id
        args = context.args
        amount = float(args[0])

        mentions = [u.lstrip('@') for u in args if u.startswith('@')]
        description_words = [w for w in args[1:] if not w.startswith('@')]
        description = ' '.join(description_words)

        involved = list(set(mentions))
        payer = update.effective_user.username or update.effective_user.first_name
        if payer not in involved:
            involved.append(payer)

        if not involved:
            await update.message.reply_text("–£–∫–∞–∂–∏ –±—Ä–∞—Ç–∏—à–µ–∫ –ø–æ—Å–ª–µ —Å—É–º–º—ã –∏ –æ–ø–∏—Å–∞–Ω–∏—è.")
            return

        split = round(amount / len(involved), 2)
        batch_debts = []
        for user in involved:
            if user == payer:
                continue
            batch_debts.append((user, payer, split))

        database.add_debts_batch(chat_id, batch_debts)

        await update.message.reply_text(
            f"{description}: {amount}‚Çº / {len(involved)} = {split}‚Çº\n"
            f"{', '.join('@' + u for u in involved)}",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üìä –ü–æ–∫–∞–∑–∞—Ç—å –±–∞–ª–∞–Ω—Å", callback_data='balance')]
            ])
        )
    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞: {repr(e)}\n–§–æ—Ä–º–∞—Ç: /add 900 –£–∂–∏–Ω @user1 @user2")



async def payback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        chat_id = update.effective_chat.id
        user_id = update.effective_user.id
        args = context.args
        amount = float(args[0])

        mentions = [u.lstrip('@') for u in args if u.startswith('@')]
        involved = list(set(mentions))

        if not involved:
            await update.message.reply_text("–£–∫–∞–∂–∏ –∫–æ–º—É –≤–µ—Ä–Ω—É–ª –¥–µ–Ω—å–≥–∏, –õ–µ–±–æ–≤—Å–∫–∏.")
            return

        if len(involved) > 1:
            await update.message.reply_text("–ê–ª–∞, –±–∏—Ä—å-–±–∏—Ä—å —É–∫–∞–∑—ã–≤–∞–π –∫–æ–º—É –≤–µ—Ä–Ω—É–ª")
            return

        payer = update.effective_user.username or update.effective_user.first_name
        amount = round(amount / len(involved), 2)
        batch_debts = [(involved[0], payer, amount)]

        database.add_debts_batch(chat_id, batch_debts)

        await update.message.reply_text(
            f"Payback –¥–æ–±–∞–≤–ª–µ–Ω. {payer} –≤–µ—Ä–Ω—É–ª {involved[0]}  {amount}‚Çº",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üìä –ü–æ–∫–∞–∑–∞—Ç—å –±–∞–ª–∞–Ω—Å", callback_data='balance')]
            ])
        )
    except Exception as e:
        print(str(e))
        await update.message.reply_text(f"–û—à–∏–±–∫–∞: {e}\n–§–æ—Ä–º–∞—Ç: /payback 900 @user1")


# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ / –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞—Ä—Ç—ã
async def set_card(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        chat_id = update.effective_chat.id
        user_id = update.effective_user.id
        card_number = context.args[0]
        username = update.effective_user.username
        if not username:
            await update.message.reply_text("–£ —Ç–µ–±—è –Ω–µ—Ç username –≤ Telegram, –ø–æ—ç—Ç–æ–º—É –∫–∞—Ä—Ç—É —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–µ–ª—å–∑—è.")
            return

        if len(card_number) != 16 or not card_number.isdigit():
            await update.message.reply_text("–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∏–∑ 16 —Ü–∏—Ñ—Ä.")
            return

        if not luhn.luhn_check(card_number):
            await update.message.reply_text("–ê–π –±—Ä–∞–∞–∞—Ç–∏—à–∫–∞, –ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã –Ω–µ –≤–∞–ª–∏–¥–Ω—ã–π!!!!")
            return

        database.set_card(chat_id, username, card_number)
        await update.message.reply_text("–ö–∞—Ä—Ç–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!")
    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞: {e}\n–ò—Å–ø–æ–ª—å–∑—É–π —Ñ–æ—Ä–º–∞—Ç: /setcard 1234567812345678")

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–∞—Ä—Ç—ã –¥—Ä—É–≥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def get_card(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    user_id = update.effective_user.id

    if not context.args:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π: /card @username")
        return

    username = context.args[0].lstrip('@')
    card = database.get_card(chat_id, username)
    if card:
        await update.message.reply_text(f"{card[0]}")
    else:
        await update.message.reply_text(f"–£ @{username} –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–π –∫–∞—Ä—Ç—ã.")

# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ ===

async def show_balance(message, chat_id):

    rows = database.get_debts(chat_id)
    if not rows:
        await message.reply_text("–ë–∞–ª–∞–Ω—Å –ø—É—Å—Ç ‚Äî –±—Ä–∞—Ç–∏—à–∫–∏ —Ä–∞—Å—Å—á–∏—Ç–∞–ª–∏—Å—å üôå")
        return

    lines = []
    for debtor, creditor, amount in rows:
        card = database.get_card(chat_id, creditor)
        if card:
            card_info = card[0]
        else:
            card_info = "–ö–∞—Ä—Ç–∞ –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω–∞"
        lines.append(f"@{debtor} –¥–æ–ª–∂–µ–Ω @{creditor}: {round(amount, 2)}‚Çº. –ö–∞—Ä—Ç–∞: {card_info}")

    await message.reply_text("üìä –ë–∞–ª–∞–Ω—Å:\n" + "\n".join(lines))

async def reset_debts(message, chat_id):
    try:
        database.reset_debts(chat_id)
        await message.reply_text("–í—Å–µ –¥–æ–ª–≥–∏ —É–¥–∞–ª–µ–Ω—ã! üîÑ")
    except Exception as e:
        await message.reply_text(repr(e))


async def show_help(message):
    await message.reply_text(
        "üí° –ö–æ–º–∞–Ω–¥—ã:\n"
        "/add —Å—É–º–º–∞ –æ–ø–∏—Å–∞–Ω–∏–µ @user1 @user2 ‚Äî –¥–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥\n"
        "/payback —Å—É–º–º–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ @user ‚Äî –¥–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥\n"
        "/balance ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –±–∞–ª–∞–Ω—Å\n"
        "/reset ‚Äî —Å–±—Ä–æ—Å–∏—Ç—å –≤—Å—ë\n"
        "/setcard 1234567812345678 ‚Äî —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–≤–æ–π –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã\n"
        "/card @username ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
        "/report_excel ‚Äî –æ—Ç—á—ë—Ç –≤ Excel\n"
        "/help ‚Äî –ø–æ–º–æ—â—å"
    )

async def send_excel_report(message, chat_id):
    rows = database.get_all_debts_report(chat_id)
    if not rows:
        await message.reply_text("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç—á—ë—Ç–∞.")
        return

    df = pd.DataFrame(rows, columns=["–î–∞—Ç–∞", "–î–æ–ª–∂–Ω–∏–∫", "–ö—Ä–µ–¥–∏—Ç–æ—Ä", "–°—É–º–º–∞"])
    excel_file = f"report-{str(chat_id)}.xlsx"
    df.to_excel(excel_file, index=False)
    await message.reply_document(document=open(excel_file, "rb"))

# === –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ ===

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    message = query.message
    data = query.data
    chat_id = query.message.chat.id

    if data == "add":
        await message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤—Ä—É—á–Ω—É—é:\n/add 900 –£–∂–∏–Ω @user1 @user2")
    elif data == "payback":
        await message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤—Ä—É—á–Ω—É—é:\n/payback 900 @user1")
    elif data == "balance":
        await show_balance(message, chat_id)
    elif data == "reset":
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("‚úÖ –î–∞, —ç—ç—ç", callback_data="confirm_reset")],
            [InlineKeyboardButton("‚ùå –ù–µ—Ç, —á–∞—à–Ω—É–ª—Å—è", callback_data="cancel_reset")]
        ])
        await message.reply_text("–¢—ã —Ç–æ—á–Ω–æ —Ö–æ—á–µ—à—å –æ–±–Ω—É–ª–∏—Ç—å –≤—Å–µ —Ä–∞—Å—á—ë—Ç—ã? üß®", reply_markup=keyboard)
    elif data == "confirm_reset":
        await reset_debts(message, chat_id)
    elif data == "cancel_reset":
        await message.reply_text("–û—Ç–º–µ–Ω–∞ —Å–±—Ä–æ—Å–∞. –í—Å—ë –æ—Å—Ç–∞–ª–æ—Å—å –∫–∞–∫ –±—ã–ª–æ ü§ù")
    elif data == "help":
        await show_help(message)
    elif data == "excel":
        await send_excel_report(message, chat_id)


def main():
    # === –ó–∞–ø—É—Å–∫ Flask-—Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è Replit ===
    web_app = Flask('')

    @web_app.route('/')
    def health_check():
        return "BOT OK", 200

    # def run_web():
    #    web_app.run(host='0.0.0.0', port=8080)

    # Thread(target=run_web).start()
    def run_web():
        import os
        port = int(os.environ.get('PORT', 8080))  # Render –∑–∞–¥–∞—ë—Ç –ø–æ—Ä—Ç —á–µ—Ä–µ–∑ PORT
        web_app.run(host='0.0.0.0', port=port)

    app = ApplicationBuilder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("add", add))
    app.add_handler(CommandHandler("payback", payback))
    app.add_handler(CommandHandler("balance", lambda u, c: show_balance(u.message, u.effective_chat.id)))
    app.add_handler(CommandHandler("reset", lambda u, c: reset_debts(u.message, u.effective_chat.id)))
    app.add_handler(CommandHandler("help", lambda u, c: show_help(u.message)))
    app.add_handler(CommandHandler("setcard", set_card))
    app.add_handler(CommandHandler("card", get_card))
    app.add_handler(CommandHandler("report_excel", lambda u, c: send_excel_report(u.message, u.effective_chat.id, c)))
    app.add_handler(CallbackQueryHandler(button_handler))
    # app.post_init = set_weekly_job # –ó–∞–ø—É—Å–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–ª–∫–∏ –¥–ª—è –°–µ–º—ã

    Thread(target=run_web).start()

    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()

if __name__ == '__main__':
    main()


    

